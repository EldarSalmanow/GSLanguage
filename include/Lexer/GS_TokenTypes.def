#if !defined(GS_TOKENTYPE)
    #define GS_TOKENTYPE(name) name
#endif

/**
 * Unknown ( error )
 */
GS_TOKENTYPE(Unknown),

/**
 * End of file ( EOF )
 */
GS_TOKENTYPE(EndOfFile),

/**
 * Identifier ( abc )
 */
GS_TOKENTYPE(Identifier),

/**
 * Module keyword ( module )
 */
GS_TOKENTYPE(KeywordModule),

/**
 * Import keyword ( import )
 */
GS_TOKENTYPE(KeywordImport),

/**
 * Func keyword ( func )
 */
GS_TOKENTYPE(KeywordFunc),

/**
 * Var keyword ( var )
 */
GS_TOKENTYPE(KeywordVar),

/**
 * If keyword ( if )
 */
GS_TOKENTYPE(KeywordIf),

/**
 * Else keyword ( else )
 */
GS_TOKENTYPE(KeywordElse),

/**
 * For keyword ( for )
 */
GS_TOKENTYPE(KeywordFor),

/**
 * While keyword ( while )
 */
GS_TOKENTYPE(KeywordWhile),

/**
 * Match keyword ( match )
 */
GS_TOKENTYPE(KeywordMatch),

/**
 * Return keyword ( return )
 */
GS_TOKENTYPE(KeywordReturn),

/**
 * In keyword ( in )
 */
GS_TOKENTYPE(KeywordIn),

/**
 * As keyword ( as )
 */
GS_TOKENTYPE(KeywordAs),

/**
 * Extern keyword ( extern )
 */
GS_TOKENTYPE(KeywordExtern),

/**
 * Symbol literal ( 'a' )
 */
GS_TOKENTYPE(LiteralSymbol),

/**
 * Number literal ( 123 )
 */
GS_TOKENTYPE(LiteralNumber),

/**
 * String literal ( "abc" )
 */
GS_TOKENTYPE(LiteralString),

/**
 * Left paren symbol ( ( )
 */
GS_TOKENTYPE(SymbolLeftParen),

/**
 * Right paren symbol ( ) )
 */
GS_TOKENTYPE(SymbolRightParen),

/**
 * Left brace symbol ( { )
 */
GS_TOKENTYPE(SymbolLeftBrace),

/**
 * Right brace symbol ( } )
 */
GS_TOKENTYPE(SymbolRightBrace),

/**
 * Left bracket symbol ( [ )
 */
GS_TOKENTYPE(SymbolLeftBracket),

/**
 * Right bracket symbol ( ] )
 */
GS_TOKENTYPE(SymbolRightBracket),

/**
 * Colon symbol ( : )
 */
GS_TOKENTYPE(SymbolColon),

/**
 * Comma symbol ( , )
 */
GS_TOKENTYPE(SymbolComma),

/**
 * Dot symbol ( . )
 */
GS_TOKENTYPE(SymbolDot),

/**
 * Plus symbol ( + )
 */
GS_TOKENTYPE(SymbolPlus),

/**
 * Minus symbol ( - )
 */
GS_TOKENTYPE(SymbolMinus),

/**
 * Star symbol ( * )
 */
GS_TOKENTYPE(SymbolStar),

/**
 * Slash symbol ( / )
 */
GS_TOKENTYPE(SymbolSlash),

/**
 * Percent symbol ( % )
 */
GS_TOKENTYPE(SymbolPercent),

/**
 * Caret symbol ( ^ )
 */
GS_TOKENTYPE(SymbolCaret),

/**
 * And (bitwise and) symbol ( & )
 */
GS_TOKENTYPE(SymbolAnd),

/**
 * Or (bitwise or) symbol ( | )
 */
GS_TOKENTYPE(SymbolOr),

/**
 * Gt (greater than) symbol ( > )
 */
GS_TOKENTYPE(SymbolGt),

/**
 * Lt (less than) symbol ( < )
 */
GS_TOKENTYPE(SymbolLt),

/**
 * Not symbol ( ! )
 */
GS_TOKENTYPE(SymbolNot),

/**
 * Eq symbol ( = )
 */
GS_TOKENTYPE(SymbolEq),

/**
 * Dot dot symbol ( .. )
 */
GS_TOKENTYPE(SymbolDotDot),

/**
 * Eq gt symbol ( => )
 */
GS_TOKENTYPE(SymbolEqGt),

/**
 * Plus plus symbol ( ++ )
 */
GS_TOKENTYPE(SymbolPlusPlus),

/**
 * Minus minus symbol ( -- )
 */
GS_TOKENTYPE(SymbolMinusMinus),

/**
 * Star star symbol ( ** )
 */
GS_TOKENTYPE(SymbolStarStar),

/**
 * And and (logic and) symbol ( && )
 */
GS_TOKENTYPE(SymbolAndAnd),

/**
 * Or or (logical or) symbol ( || )
 */
GS_TOKENTYPE(SymbolOrOr),

/**
 * Gt gt (right shift) symbol ( >> )
 */
GS_TOKENTYPE(SymbolGtGt),

/**
 * Lt lt (left shift) symbol ( << )
 */
GS_TOKENTYPE(SymbolLtLt),

/**
 * Gt eq (greater than or equals) symbol ( >= )
 */
GS_TOKENTYPE(SymbolGtEq),

/**
 * Lt eq (less than or equals) symbol ( <= )
 */
GS_TOKENTYPE(SymbolLtEq),

/**
 * Eq eq symbol (equals) symbol ( == )
 */
GS_TOKENTYPE(SymbolEqEq),

/**
 * Not eq (not equals) symbol ( != )
 */
GS_TOKENTYPE(SymbolNotEq),

/**
 * Plus eq symbol ( += )
 */
GS_TOKENTYPE(SymbolPlusEq),

/**
 * Minus eq symbol ( -= )
 */
GS_TOKENTYPE(SymbolMinusEq),

/**
 * Star eq symbol ( *= )
 */
GS_TOKENTYPE(SymbolStarEq),

/**
 * Slash eq symbol ( /= )
 */
GS_TOKENTYPE(SymbolSlashEq),

/**
 * Percent eq symbol ( %= )
 */
GS_TOKENTYPE(SymbolPercentEq),

/**
 * Caret eq symbol ( ^= )
 */
GS_TOKENTYPE(SymbolCaretEq),

/**
 * And eq symbol ( &= )
 */
GS_TOKENTYPE(SymbolAndEq),

/**
 * Or eq symbol ( |= )
 */
GS_TOKENTYPE(SymbolOrEq),

/**
 * Space symbol (   )
 */
GS_TOKENTYPE(SymbolSpace)

#undef GS_TOKENTYPE
